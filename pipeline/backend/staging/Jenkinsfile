pipeline {
    agent { 
        label 'vm4' 
        }
    stages {
        stage('Setup Environment'){
            steps{
                script{
                    def title = "Pipeline ${env.JOB_BASE_NAME} #${env.BUILD_NUMBER}"
                    discordSend description: 'Pipeline has started.', 
                                link: env.BUILD_URL, 
                                result: 'STARTED', 
                                title: title, 
                                webhookURL: env.DISCORD_WEBHOOK
                }
            }           
        }
        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t quay.tiplab.local/orca/be:dev -f $HOME/NETRA/netra_backend/deployment/Dockerfile.base $HOME/NETRA/netra_backend/'
                }
            }
            post{
                success {
                    script{
                        echo "Success, continue to next stage..."
                    }
                }
                failure {
                    script{
                        error "Failed, exiting now..."
                    }
                }
                aborted {
                    script{
                        error "Aborted, exiting now..."
                    }
                }
                unstable {
                    script{
                        error "Unstable, exiting now..."                    
                    }
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    sh 'docker push quay.tiplab.local/orca/be:dev'
                }
            }
        }
        stage('Restart Docker Compose') {
            steps {
                script {
                    sh 'docker compose -f $HOME/NETRA/netra_backend/deployment/docker-compose.yml down backend'
                    sh 'docker compose -f $HOME/NETRA/netra_backend/deployment/docker-compose.yml up backend -d'
                }
            }
        }
    }
    post {
        success {
            script {
                // Send notification to Discord on successful completion
                def result = currentBuild.currentResult.toLowerCase()
                discordSend webhookURL: DISCORD_WEBHOOK,
                            result: currentBuild.currentResult,
                            description: "**Build:** ${env.BUILD_NUMBER}\n**Status:** ${result}\n\u2060", /* word joiner character forces a blank line */
                            notes: "Hey <@588945460719255562>, here's some Notes!",
                            showChangeset: true
            }
        }
        failure {
            script {
                // Send notification to Discord on failure
                discordSend webhookURL: env.DISCORD_WEBHOOK,
                            description: 'Pipeline has failed.',
                            result: 'FAILURE', 
                            notes: "Hey <@588945460719255562>, the pipeline is failure"
            }
        }
        aborted {
            script {
                // Send notification to Discord on failure
                discordSend webhookURL: env.DISCORD_WEBHOOK,
                            description: 'Pipeline has aborted.',
                            result: 'ABORTED', 
                            notes: "Hey <@588945460719255562>, the pipeline is aborted"           
            }
        }
        unstable {
            script {
                // Send notification to Discord on failure
                discordSend webhookURL: env.DISCORD_WEBHOOK,
                            description: 'Pipeline has unstable.',
                            result: 'UNSTABLE', 
                            notes: "Hey <@588945460719255562>, the pipeline is unstable"
            }
        }
        always {
            deleteDir()
            dir("${workspace}@tmp") {
                deleteDir()
            }
            dir("${workspace}@script") {
                deleteDir()
            }
        }
    }
}